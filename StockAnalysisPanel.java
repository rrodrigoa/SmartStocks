/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package stockanalysis;

import java.awt.BorderLayout;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.net.ConnectException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;

import java.awt.event.KeyEvent;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;

/**
 *
 * @author rodrigoa
 */
public class StockAnalysisPanel extends javax.swing.JPanel implements ListSelectionListener, Runnable {

    /**
     * Creates new form StockAnalysisPanel
     */
    public StockAnalysisPanel() {
        predictTableDefaultTableModel = new javax.swing.table.DefaultTableModel(
                new Object[][]{}, new String[]{"Symbol", "Company"}) {
            Class[] types = new Class[]{java.lang.Object.class,
                java.lang.String.class};
            boolean[] canEdit = new boolean[]{true, false};

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        stockDataTableDefaultModel_prediction = new javax.swing.table.DefaultTableModel(
                new Object[][]{{null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null}}, new String[]{
            "Date", "Open", "High", "Low", "Close"}) {
            Class[] types = new Class[]{java.lang.String.class,
                java.lang.String.class, java.lang.String.class,
                java.lang.String.class, java.lang.String.class};
            boolean[] canEdit = new boolean[]{false, false, false, false,
                false};

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        managementSymbolTableDefaultTableModel = new javax.swing.table.DefaultTableModel(
                new Object[][]{}, new String[]{"Symbol", "Company"}) {
            Class[] types = new Class[]{java.lang.Object.class,
                java.lang.String.class};
            boolean[] canEdit = new boolean[]{true, false};

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        initComponents();

        // Create selection model for stock prediction table
        stockSymbolTableSelectionModel = stockSymbols_predcition.getSelectionModel();
        stockSymbolTableSelectionModel.addListSelectionListener(this);

        // Create selection model for symbol management table
        stockSymbolManagementTableSelectionModel = stockSymbols_Management_Symbol.getSelectionModel();
        stockSymbolManagementTableSelectionModel.addListSelectionListener(this);

        downloadedData = new HashMap<String, StockInfo[]>();
        logger = Logger.getInstance();
        r = RController.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockSymbols_predcition = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        predictionGraphPanel_prediction = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        days30label = new javax.swing.JLabel();
        tomorowValue_predict = new javax.swing.JLabel();
        next7Days_predict = new javax.swing.JLabel();
        next30Days_predict = new javax.swing.JLabel();
        next15Days_predict = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        graphPanel_predict = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stockDataTable_prediction = new javax.swing.JTable();
        predictButton_prediction = new javax.swing.JButton();
        progressBar_prediction = new javax.swing.JProgressBar();
        progressLabel_prediction = new javax.swing.JLabel();
        plotStockButton_predict = new javax.swing.JButton();
        searchLabel_prediction = new javax.swing.JLabel();
        SearchTextField_Prediction = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        stockSymbols_Management_Symbol = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        addSymbolTextField_Management_Symbols = new javax.swing.JTextField();
        addSymbolNameTextField_Management_Symbols = new javax.swing.JTextField();
        addSymbolButton_Management_Symbols = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        deleteSymbolButton_Management_Symbols = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        loadDBButton_Management_Symbols = new javax.swing.JButton();
        saveFileButton_Management_Symbols = new javax.swing.JButton();
        saveDBButton_Management_Symbols = new javax.swing.JButton();
        searchLabel_prediction1 = new javax.swing.JLabel();
        SearchTextField_Management_Symbols = new javax.swing.JTextField();

        stockSymbols_predcition.setModel(predictTableDefaultTableModel);
        stockSymbols_predcition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stockSymbols_predcitionKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                stockSymbols_predcitionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(stockSymbols_predcition);

        jLabel1.setText("Close value next 15 days");

        jLabel2.setText("Close value next 7 days");

        days30label.setText("Close value next 30 days");

        tomorowValue_predict.setText("0.00");

        next7Days_predict.setText("0.00");

        next30Days_predict.setText("0.00");

        next15Days_predict.setText("0.00");

        jLabel8.setText("Close value tomorow");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tomorowValue_predict)
                    .addComponent(next7Days_predict))
                .addGap(72, 72, 72)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(days30label, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(next30Days_predict)
                    .addComponent(next15Days_predict))
                .addContainerGap(185, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tomorowValue_predict)
                    .addComponent(jLabel8)
                    .addComponent(next15Days_predict))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(next30Days_predict)
                    .addComponent(days30label)
                    .addComponent(jLabel2)
                    .addComponent(next7Days_predict))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.getAccessibleContext().setAccessibleName("Close value next 15 days");

        javax.swing.GroupLayout graphPanel_predictLayout = new javax.swing.GroupLayout(graphPanel_predict);
        graphPanel_predict.setLayout(graphPanel_predictLayout);
        graphPanel_predictLayout.setHorizontalGroup(
            graphPanel_predictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphPanel_predictLayout.setVerticalGroup(
            graphPanel_predictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout predictionGraphPanel_predictionLayout = new javax.swing.GroupLayout(predictionGraphPanel_prediction);
        predictionGraphPanel_prediction.setLayout(predictionGraphPanel_predictionLayout);
        predictionGraphPanel_predictionLayout.setHorizontalGroup(
            predictionGraphPanel_predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(graphPanel_predict, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        predictionGraphPanel_predictionLayout.setVerticalGroup(
            predictionGraphPanel_predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(predictionGraphPanel_predictionLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphPanel_predict, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Graph", predictionGraphPanel_prediction);

        stockDataTable_prediction.setModel(stockDataTableDefaultModel_prediction);
        jScrollPane2.setViewportView(stockDataTable_prediction);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Data", jPanel3);

        predictButton_prediction.setText("Predict");
        predictButton_prediction.setEnabled(false);
        predictButton_prediction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictButton_predictionActionPerformed(evt);
            }
        });

        progressLabel_prediction.setText("Select stocks and click on Predict");

        plotStockButton_predict.setText("Plot Stock");
        plotStockButton_predict.setEnabled(false);
        plotStockButton_predict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotStockButton_predictActionPerformed(evt);
            }
        });

        searchLabel_prediction.setText("Search:");

        SearchTextField_Prediction.setBackground(new java.awt.Color(240, 240, 240));
        SearchTextField_Prediction.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SearchTextField_Prediction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SearchTextField_PredictionKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                    .addComponent(plotStockButton_predict, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchLabel_prediction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchTextField_Prediction)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressLabel_prediction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(progressBar_prediction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(predictButton_prediction, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(progressLabel_prediction)
                    .addComponent(searchLabel_prediction)
                    .addComponent(SearchTextField_Prediction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(progressBar_prediction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(predictButton_prediction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plotStockButton_predict)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Prediction", jPanel1);

        stockSymbols_Management_Symbol.setModel(managementSymbolTableDefaultTableModel);
        stockSymbols_Management_Symbol.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(stockSymbols_Management_Symbol);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Add Symbol"));

        addSymbolTextField_Management_Symbols.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addSymbolTextField_Management_SymbolsKeyTyped(evt);
            }
        });

        addSymbolButton_Management_Symbols.setText("Add / Update");
        addSymbolButton_Management_Symbols.setEnabled(false);
        addSymbolButton_Management_Symbols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSymbolButton_Management_SymbolsActionPerformed(evt);
            }
        });

        jLabel3.setText("Symbol");

        jLabel4.setText("Name");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addSymbolButton_Management_Symbols, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addSymbolTextField_Management_Symbols)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 206, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(addSymbolNameTextField_Management_Symbols, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSymbolTextField_Management_Symbols, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addSymbolNameTextField_Management_Symbols, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(addSymbolButton_Management_Symbols)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Delete Symbol"));

        deleteSymbolButton_Management_Symbols.setText("Delete");
        deleteSymbolButton_Management_Symbols.setEnabled(false);
        deleteSymbolButton_Management_Symbols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSymbolButton_Management_SymbolsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(deleteSymbolButton_Management_Symbols, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteSymbolButton_Management_Symbols)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Load & Save DB File"));

        loadDBButton_Management_Symbols.setText("Load From File");
        loadDBButton_Management_Symbols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDBButton_Management_SymbolsActionPerformed(evt);
            }
        });

        saveFileButton_Management_Symbols.setText("Save To File");
        saveFileButton_Management_Symbols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileButton_Management_SymbolsActionPerformed(evt);
            }
        });

        saveDBButton_Management_Symbols.setText("Save To DB");
        saveDBButton_Management_Symbols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDBButton_Management_SymbolsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadDBButton_Management_Symbols, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveFileButton_Management_Symbols, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveDBButton_Management_Symbols, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(saveFileButton_Management_Symbols)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveDBButton_Management_Symbols))
            .addComponent(loadDBButton_Management_Symbols, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        searchLabel_prediction1.setText("Search:");

        SearchTextField_Management_Symbols.setBackground(new java.awt.Color(240, 240, 240));
        SearchTextField_Management_Symbols.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SearchTextField_Management_Symbols.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SearchTextField_Management_SymbolsKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(searchLabel_prediction1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchTextField_Management_Symbols)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchLabel_prediction1)
                    .addComponent(SearchTextField_Management_Symbols, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane3.addTab("Symbols", jPanel5);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Management", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents
    private Map<String, StockInfo[]> downloadedData = null;

    private StockInfo[] getHistoricalData(String symbol) {
        // Check if data was downloaded already
        StockInfo[] data = downloadedData.get(symbol);
        if (data == null) {
            // Download data
            data = downloadData(symbol);

            // Verify if result is not null (if null means that something wrong happened while download data)
            if (data == null) {
                return null;
            }

            // Save data
            downloadedData.put(symbol, data);
        }

        // Return stock historical information
        return data;
    }

    private StockInfo[] downloadData(String symbol) {
        List<StockInfo> stockInfoArray = null;
        String[] splitLine = null;
        Boolean tryAgain = true;
        Boolean useGoogle = true;
        
        // Use Yahoo for indexes as google does not allow the download of composite
        if (this.stockExchange == StockExchangeEnum.INDEXES) {
            useGoogle = false;
        }
        
        while (tryAgain) {
            try {
                stockInfoArray = new ArrayList<StockInfo>();
                String downloadURL = "";

                // GOOGLE Download
                if (useGoogle) {
                    String downloadURL_begin = "http://www.google.com/finance/historical?q=";
                    String downloadURL_end = "&output=csv";

                    Calendar nowCalendar = Calendar.getInstance();
                    Date dateNow = new Date();
                    nowCalendar.add(Calendar.YEAR, -16);
                    Date date16YearsAgo = nowCalendar.getTime();

                    SimpleDateFormat urlDateFormat = new SimpleDateFormat("MMM+dd,+yyyy");

                    String dateString16YearsAgo = urlDateFormat.format(date16YearsAgo);
                    String dateStringNow = urlDateFormat.format(dateNow);

                    downloadURL = downloadURL_begin + this.stockExchange + "%3A" + symbol + "&startdate=" + dateString16YearsAgo + "&enddate=" + dateStringNow + downloadURL_end;
                } else {// YAHOO Download
                    String downloadURL_begin = "http://ichart.finance.yahoo.com/table.csv?s=";
                    String downloadURL_end = "&ignore=.csv";

                    Calendar calendar = Calendar.getInstance();
                    calendar.add(Calendar.YEAR, -16);

                    int DayOld = calendar.get(Calendar.DAY_OF_MONTH) - 1;
                    int MonthOld = calendar.get(Calendar.MONTH);
                    int YearOld = calendar.get(Calendar.YEAR);

                    calendar.setTime(new Date());

                    int DayNow = calendar.get(Calendar.DAY_OF_MONTH) - 1;
                    int MonthNow = calendar.get(Calendar.MONTH);
                    int YearNow = calendar.get(Calendar.YEAR);

                    downloadURL = downloadURL_begin + symbol + "&d=" + MonthNow + "&e=" + DayNow + "&f=" + YearNow
                            + "&g=d&a=" + MonthOld + "&b=" + DayOld + "&c=" + YearOld + downloadURL_end;
                }
                logger.log("will download csv for url " + downloadURL);
                URL urlString = new URL(downloadURL);
                URLConnection URLConnection = urlString.openConnection();

                BufferedReader reader = new BufferedReader(new InputStreamReader(URLConnection.getInputStream()));
                String inputLine = null;

                // Skip the first line as it is the header
                reader.readLine();
                logger.log("skipping header line");

                DateFormat dataFormatter = null;

                if (useGoogle) {
                    dataFormatter = new SimpleDateFormat("dd-MMM-yy");
                } else {
                    dataFormatter = new SimpleDateFormat("yyyy-MM-dd");
                }

                // Read CSV file
                while ((inputLine = reader.readLine()) != null) {
                    splitLine = inputLine.split(",");
                    float open, high, low, close;
                    long volume;
                    Date stockDate = (Date) dataFormatter.parse(splitLine[0]);
                    try {
                        open = Float.parseFloat(splitLine[1]);
                    } catch (Exception e) {
                        open = 0;
                    }
                    try {
                        high = Float.parseFloat(splitLine[2]);
                    } catch (Exception e) {
                        high = 0;
                    }
                    try {
                        low = Float.parseFloat(splitLine[3]);
                    } catch (Exception e) {
                        low = 0;
                    }
                    try {
                        close = Float.parseFloat(splitLine[4]);
                    } catch (Exception e) {
                        close = 0;
                    }
                    try {
                        volume = Long.parseLong(splitLine[5]);
                    } catch (Exception e) {
                        volume = 0;
                    }
                    StockInfo stockInfo = new StockInfo();
                    stockInfo.date = stockDate;
                    stockInfo.open = open;
                    stockInfo.high = high;
                    stockInfo.low = low;
                    stockInfo.close = close;
                    stockInfo.volume = volume;

                    stockInfoArray.add(stockInfo);
                    logger.log("read stock info for " + symbol + " on " + stockDate.toString());
                }
                reader.close();
                tryAgain = false;
            } catch (ConnectException e) {
                tryAgain = false;
                useGoogle = !useGoogle;
                logger.logError(" ConnectException for stock " + symbol);
                logger.logException(e);
                e.printStackTrace();
                
                JOptionPane.showMessageDialog(this, "Finance database server did not respond in time, please try again.");
            } catch (FileNotFoundException e) {
                tryAgain = false;
                useGoogle = !useGoogle;
                logger.logError(" Stock information for stock " + symbol + " not found");
                logger.logException(e);
                e.printStackTrace();
                
                JOptionPane.showMessageDialog(this, "StockS Symbol " + symbol + " not found, please make sure it exists on this Stock Exchange.");
            } catch (UnknownHostException e) {
                tryAgain = false;
                logger.logException(e);
                logger.logError("No internet connection");
                e.printStackTrace();
                
                JOptionPane.showMessageDialog(this, "Check your Internet connection, unable to reach the finance database.");
            } catch (Exception e) {
                tryAgain = false;
                logger.logError("Exception for stock " + symbol);
                logger.logError("DeleteStock, no data for " + symbol);
                logger.logException(e);
                e.printStackTrace();
                
                JOptionPane.showMessageDialog(this, "StockS Symbol " + symbol + " not found, please make sure it exists on this Stock Exchange.");
            }
        }

        // Verify if result has information inside
        if (stockInfoArray.size() == 0) {
            return null;
        } else {
            return stockInfoArray.toArray(new StockInfo[stockInfoArray.size()]);
        }
    }

    private DefaultOHLCDataset createDataSetFromStockInfo(StockInfo[][] dataList) {
        int totalLength = 0;
        for (int index = 0; index < dataList.length; index++) {
            logger.log("running on datalist index " + index + " value is null? " + (dataList[index]==null) );
            totalLength += dataList[index].length;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat();
        dateFormat.applyPattern("dd/MM/YYYY");

        OHLCDataItem[] ohlcData = new OHLCDataItem[totalLength];
        int OHLCIndex = 0;
        for (int dataListIndex = 0; dataListIndex < dataList.length; dataListIndex++) {
            StockInfo[] data = dataList[dataListIndex];
            for (int index = 0; index < data.length; index++) {
                logger.log("data in index " + index + " is null? " + (data[index] == null) );
                ohlcData[OHLCIndex] = new OHLCDataItem(data[index].date, data[index].open, data[index].high, data[index].low, data[index].close, data[index].volume);

                logger.log("<R> stock chart " + dateFormat.format(data[index].date.getTime()) + " open: " + data[index].open + " high: " + data[index].high + " low: " + data[index].low + " close: " + data[index].close);
                OHLCIndex++;
            }
        }

        return new DefaultOHLCDataset("Stock", ohlcData);
    }

    private JFreeChart createPredictionChart(DefaultOHLCDataset dataset) {
        // Create the JFreeChart for prediction
        JFreeChart predictionChart = ChartFactory.createHighLowChart("Stock Price Prediction",
                "Time", "Price", dataset, true);

        return predictionChart;
    }

    public void run() {
        // Get the selected indexes for the tables
        ArrayList<String> selectedStockSymbols = new ArrayList<String>();
        TableModel currentTableModel = stockSymbols_predcition.getModel();
        int[] selectedIndexes = stockSymbols_predcition.getSelectedRows();

        // Get the symbol name for the items selected
        for (int index = 0; index < selectedIndexes.length; index++) {
            String row = (String) currentTableModel.getValueAt(selectedIndexes[index], 0);
            selectedStockSymbols.add(row);
        }
        String[] symbols = selectedStockSymbols.toArray(new String[selectedStockSymbols.size()]);

        // Get data to process as a Map
        this.progressLabel_prediction.setText("Downloading/loading historical data...");
        Map<String, StockInfo[]> dataToProcess = new HashMap<String, StockInfo[]>();
        for (int index = 0; index < symbols.length; index++) {
            StockInfo[] historicalData = this.getHistoricalData(symbols[index]);

            // Check if result has some information inside
            if (historicalData != null) {
                dataToProcess.put(symbols[index], historicalData);
            }
        }

        // If we have some data to process (no errors when reading data)
        if (dataToProcess.size() != 0) {

            // Run prediction the data to process
            StockInfo[] dataToDisplay = null;
            if (isPrediction == true) {
                this.progressLabel_prediction.setText("Running prediction...");
                dataToDisplay = r.runPrediction(dataToProcess);
            } else {
                this.progressLabel_prediction.setText("Setting plotting...");
                dataToDisplay = new StockInfo[]{};
            }
            StockInfo[] flatenDataToProcess = r.flatMapOfData(dataToProcess);
            Collections.reverse(Arrays.asList(flatenDataToProcess));
            
            logger.log("Size of flaten data to process is " + flatenDataToProcess.length);

            // Create the OHLC data set to display on the chart
            this.progressLabel_prediction.setText("Creating OHLC chart...");
            DefaultOHLCDataset dataSet = this.createDataSetFromStockInfo(new StockInfo[][]{flatenDataToProcess, dataToDisplay});
            // Create chart from data
            JFreeChart chart = this.createPredictionChart(dataSet);

            // Add chart into panel
            ChartPanel chartPanel = new ChartPanel(chart);
            this.graphPanel_predict.removeAll();
            this.graphPanel_predict.setLayout(new java.awt.BorderLayout());
            this.graphPanel_predict.add(chartPanel, BorderLayout.CENTER);
            this.graphPanel_predict.validate();

            // Set data table values
            this.progressLabel_prediction.setText("Creating table data...");
            SimpleDateFormat dateFormat = new SimpleDateFormat();
            dateFormat.applyPattern("dd/MM/YYYY");

            // Delete all data from table model
            stockDataTableDefaultModel_prediction.getDataVector().removeAllElements();
            stockDataTableDefaultModel_prediction.fireTableDataChanged();

            // Add values into the table
            for (int indexOnPredictionTable = dataToDisplay.length; indexOnPredictionTable-- != 0;) {

                String toAddOnTable[] = {
                    "<html><b>" + dateFormat.format(dataToDisplay[indexOnPredictionTable].date) + "</b></html>",
                    "<html><b>" + Float.toString(dataToDisplay[indexOnPredictionTable].open) + "</b></html>",
                    "<html><b>" + Float.toString(dataToDisplay[indexOnPredictionTable].high) + "</b></html>",
                    "<html><b>" + Float.toString(dataToDisplay[indexOnPredictionTable].low) + "</b></html>",
                    "<html><b>" + Float.toString(dataToDisplay[indexOnPredictionTable].close) + "</b></html>"
                };

                stockDataTableDefaultModel_prediction.addRow(toAddOnTable);
            }

            for (int indexOnFlatenData = flatenDataToProcess.length; indexOnFlatenData-- != 0;) {
                String toAddOnTable[] = {
                    dateFormat.format(flatenDataToProcess[indexOnFlatenData].date),
                    Float.toString(flatenDataToProcess[indexOnFlatenData].open),
                    Float.toString(flatenDataToProcess[indexOnFlatenData].high),
                    Float.toString(flatenDataToProcess[indexOnFlatenData].low),
                    Float.toString(flatenDataToProcess[indexOnFlatenData].close)
                };

                stockDataTableDefaultModel_prediction.addRow(toAddOnTable);
            }

            stockDataTableDefaultModel_prediction.fireTableDataChanged();

            if (isPrediction == true) {
                // Set prediction value for labes
                this.tomorowValue_predict.setText(Float.toString(dataToDisplay[0].close));
                this.next7Days_predict.setText(Float.toString(dataToDisplay[6].close));
                this.next15Days_predict.setText(Float.toString(dataToDisplay[14].close));
                this.next30Days_predict.setText(Float.toString(dataToDisplay[29].close));
            } else {
                resetValuesOnPanel();
            }
        }

        releasePanelBusy();
    }

    private void resetValuesOnPanel() {
        // Reset value for labels
        this.tomorowValue_predict.setText("0.00");
        this.next7Days_predict.setText("0.00");
        this.next15Days_predict.setText("0.00");
        this.next30Days_predict.setText("0.00");
    }

    private void releasePanelBusy() {
        this.progressBar_prediction.setIndeterminate(false);
        this.predictButton_prediction.setEnabled(true);
        this.stockSymbols_predcition.setEnabled(true);
        this.plotStockButton_predict.setEnabled(true);
        this.progressLabel_prediction.setText("Select stocks and click on Predict/Prot");
    }

    private void predictButton_predictionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictButton_predictionActionPerformed

        // Set the progress bar to progress
        this.isPrediction = true;
        this.progressBar_prediction.setIndeterminate(true);
        this.predictButton_prediction.setEnabled(false);
        this.stockSymbols_predcition.setEnabled(false);
        this.plotStockButton_predict.setEnabled(false);
        new Thread(this).start();
    }//GEN-LAST:event_predictButton_predictionActionPerformed

    private void scrollSymbolListToPosition(int index, JTable table) {
        table.getSelectionModel().setSelectionInterval(index, index);
        table.scrollRectToVisible(new Rectangle(table.getCellRect(index, 0, true)));
    }

    private void searchOnStockSymbolList(String searchText, JTable table) {
        int searchIndex = Collections.binarySearch(stockSymbolList, searchText);
        if (searchIndex < 1) {
            searchIndex = ~searchIndex;
        }

        this.scrollSymbolListToPosition(searchIndex, table);
    }

    private void stockSymbols_predcitionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockSymbols_predcitionKeyTyped
        char pressedKey = evt.getKeyChar();

        // If needs to delete a char from search
        if (needToDeleteAChar == true) {
            needToDeleteAChar = false;
            if (stockSymbolSearchString.length() != 0) {
                stockSymbolSearchString = stockSymbolSearchString.substring(0, stockSymbolSearchString.length() - 1);
            }
        } else if (pressedKey >= '0' && pressedKey <= 'z') {// A valid char needs to be appended on the search string
            // Append the char in the search string
            stockSymbolSearchString = stockSymbolSearchString + pressedKey;
        }
        stockSymbolSearchString = stockSymbolSearchString.toUpperCase();

        // Update the search text field
        SearchTextField_Prediction.setText(stockSymbolSearchString);

        // Search on the list
        this.searchOnStockSymbolList(stockSymbolSearchString, stockSymbols_predcition);
    }//GEN-LAST:event_stockSymbols_predcitionKeyTyped

    private void stockSymbols_predcitionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stockSymbols_predcitionKeyPressed
        int charCode = evt.getKeyCode();

        // If the key is backspace or delete, need to delete a char from the search string
        if (charCode == KeyEvent.VK_BACK_SPACE || charCode == KeyEvent.VK_DELETE) {
            needToDeleteAChar = true;
        }
    }//GEN-LAST:event_stockSymbols_predcitionKeyPressed

    private void SearchTextField_PredictionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTextField_PredictionKeyTyped
        char pressedKey = Character.toUpperCase(evt.getKeyChar());

        evt.setKeyChar(pressedKey);

        // Search on the list
        stockSymbolSearchString = SearchTextField_Prediction.getText() + pressedKey;
        this.searchOnStockSymbolList(stockSymbolSearchString, stockSymbols_predcition);
    }//GEN-LAST:event_SearchTextField_PredictionKeyTyped

    private void plotStockButton_predictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotStockButton_predictActionPerformed
        // Set the progress bar to progress
        this.isPrediction = false;
        this.progressBar_prediction.setIndeterminate(true);
        this.predictButton_prediction.setEnabled(false);
        this.plotStockButton_predict.setEnabled(false);
        this.stockSymbols_predcition.setEnabled(false);
        new Thread(this).start();
    }//GEN-LAST:event_plotStockButton_predictActionPerformed

    private void deleteSymbolButton_Management_SymbolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSymbolButton_Management_SymbolsActionPerformed
        // Get the selected indexes for the tables
        TableModel currentTableModel = stockSymbols_Management_Symbol.getModel();
        int[] selectedIndexes = stockSymbols_Management_Symbol.getSelectedRows();

        // Get the symbol name for the items selected
        for (int index = 0; index < selectedIndexes.length; index++) {
            String row = (String) currentTableModel.getValueAt(selectedIndexes[index], 0);

            // Delete symbols from Map
            this.predictionStockSymbols.remove(row);
        }

        // Update symbol tables
        this.setStockSymbols(this.predictionStockSymbols, this.stockExchange);
    }//GEN-LAST:event_deleteSymbolButton_Management_SymbolsActionPerformed

    private void loadDBButton_Management_SymbolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDBButton_Management_SymbolsActionPerformed
        // Load symbols from file
        Map<String,String> tempMap  = this.controller.loadStockSymbolsFromFile();
        
        // Check if return of load stock symbol has symbols, if not means file does not exist
        if(tempMap == null){
            JOptionPane.showMessageDialog(this, "File " + this.controller.getFileName() + " with symbols does not extist.");
        }else{
            this.predictionStockSymbols = tempMap;
            // Update symbol tables
            this.setStockSymbols(this.predictionStockSymbols, this.stockExchange);
        }        
    }//GEN-LAST:event_loadDBButton_Management_SymbolsActionPerformed

    private void saveFileButton_Management_SymbolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileButton_Management_SymbolsActionPerformed
        // Save symbols to file
        this.controller.saveStockSymbolsToFile(predictionStockSymbols);
    }//GEN-LAST:event_saveFileButton_Management_SymbolsActionPerformed

    private void saveDBButton_Management_SymbolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDBButton_Management_SymbolsActionPerformed
        // Erase all symbols from DB
        this.controller.eraseStockSymbolsFromDB();
        // Save symbols to DB
        this.controller.saveStockSymbolsToDB(predictionStockSymbols);
    }//GEN-LAST:event_saveDBButton_Management_SymbolsActionPerformed

    private void SearchTextField_Management_SymbolsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTextField_Management_SymbolsKeyTyped
        char pressedKey = Character.toUpperCase(evt.getKeyChar());

        evt.setKeyChar(pressedKey);

        // Search on the list
        stockSymbolSearchString = SearchTextField_Management_Symbols.getText() + pressedKey;
        this.searchOnStockSymbolList(stockSymbolSearchString, stockSymbols_Management_Symbol);
    }//GEN-LAST:event_SearchTextField_Management_SymbolsKeyTyped

    private void addSymbolButton_Management_SymbolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSymbolButton_Management_SymbolsActionPerformed
        // Get symbols and name information
        String symbol = addSymbolTextField_Management_Symbols.getText().toUpperCase();
        String name = addSymbolNameTextField_Management_Symbols.getText();
        // Set value on the map
        this.predictionStockSymbols.put(symbol, name);
        // Update symbol tables
        this.setStockSymbols(predictionStockSymbols, stockExchange);

        // Erase values on the text field
        addSymbolTextField_Management_Symbols.setText("");
        addSymbolNameTextField_Management_Symbols.setText("");

        // Disable button
        addSymbolButton_Management_Symbols.setEnabled(false);
    }//GEN-LAST:event_addSymbolButton_Management_SymbolsActionPerformed

    private void addSymbolTextField_Management_SymbolsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addSymbolTextField_Management_SymbolsKeyTyped
        // Check if count of the field is not empty to enable or desable the button
        if (addSymbolTextField_Management_Symbols.getText().length() != 0) {
            addSymbolButton_Management_Symbols.setEnabled(true);
        } else {
            addSymbolButton_Management_Symbols.setEnabled(false);
        }
    }//GEN-LAST:event_addSymbolTextField_Management_SymbolsKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField SearchTextField_Management_Symbols;
    private javax.swing.JTextField SearchTextField_Prediction;
    private javax.swing.JButton addSymbolButton_Management_Symbols;
    private javax.swing.JTextField addSymbolNameTextField_Management_Symbols;
    private javax.swing.JTextField addSymbolTextField_Management_Symbols;
    private javax.swing.JLabel days30label;
    private javax.swing.JButton deleteSymbolButton_Management_Symbols;
    private javax.swing.JPanel graphPanel_predict;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JButton loadDBButton_Management_Symbols;
    private javax.swing.JLabel next15Days_predict;
    private javax.swing.JLabel next30Days_predict;
    private javax.swing.JLabel next7Days_predict;
    private javax.swing.JButton plotStockButton_predict;
    private javax.swing.JButton predictButton_prediction;
    private javax.swing.JPanel predictionGraphPanel_prediction;
    private javax.swing.JProgressBar progressBar_prediction;
    private javax.swing.JLabel progressLabel_prediction;
    private javax.swing.JButton saveDBButton_Management_Symbols;
    private javax.swing.JButton saveFileButton_Management_Symbols;
    private javax.swing.JLabel searchLabel_prediction;
    private javax.swing.JLabel searchLabel_prediction1;
    private javax.swing.JTable stockDataTable_prediction;
    private javax.swing.JTable stockSymbols_Management_Symbol;
    private javax.swing.JTable stockSymbols_predcition;
    private javax.swing.JLabel tomorowValue_predict;
    // End of variables declaration//GEN-END:variables
    private javax.swing.table.DefaultTableModel predictTableDefaultTableModel;
    private javax.swing.table.DefaultTableModel stockDataTableDefaultModel_prediction;
    private javax.swing.table.DefaultTableModel managementSymbolTableDefaultTableModel;
    ListSelectionModel stockSymbolTableSelectionModel = null;
    ListSelectionModel stockSymbolManagementTableSelectionModel = null;
    private Map<String, String> predictionStockSymbols = null;
    private Set<String> stockSymbolSet = null;
    private List<String> stockSymbolList = null;
    private boolean isPrediction = false;
    private Controller controller = null;
    private Logger logger = null;
    private StockExchangeEnum stockExchange = null;
    private RController r = null;
    private Boolean needToDeleteAChar = false;
    private String stockSymbolSearchString = "";

    public void setStockSymbols(Map<String, String> stockSymbols, StockExchangeEnum stockExchange) {
        this.predictionStockSymbols = stockSymbols;
        this.stockExchange = stockExchange;

        // Get the stock symbols
        stockSymbolSet = predictionStockSymbols.keySet();
        stockSymbolList = new ArrayList<String>();
        stockSymbolList.addAll(stockSymbolSet);
        Collections.sort(stockSymbolList);

        // Pre populate prediction panel
        populateSymbolTables(false);
    }

    // Populate the symbol table with stock symbols and names
    private void populateSymbolTables(Boolean isOnPortfolio) {
        String[] keyOnResult = null;
        if (isOnPortfolio == false) {
            // Delete all items from prediction table
            predictTableDefaultTableModel.getDataVector().removeAllElements();
            predictTableDefaultTableModel.fireTableDataChanged();
            // Delete all items from the management symbol table
            managementSymbolTableDefaultTableModel.getDataVector().removeAllElements();
            managementSymbolTableDefaultTableModel.fireTableDataChanged();

            // Get the set of keys in the data set
            Set<String> keySetOnResult = predictionStockSymbols.keySet();
            keyOnResult = keySetOnResult.toArray(new String[keySetOnResult.size()]);
            Arrays.sort(keyOnResult);
        } else {
            // TODO: have a portfolio to analyse
        }

        // For each stock in the key, populate the table
        for (int indexOnKeySet = 0; indexOnKeySet < keyOnResult.length; indexOnKeySet++) {
            // Get stock information
            String stockSymbol = keyOnResult[indexOnKeySet];
            String stockLongName = predictionStockSymbols.get(stockSymbol);
            String toAddOnTable[] = {stockSymbol, stockLongName};

            // Add symbol to prediction table
            predictTableDefaultTableModel.addRow(toAddOnTable);
            // Add symbol to management symbol table
            managementSymbolTableDefaultTableModel.addRow(toAddOnTable);
        }
    }

    public void setController(Controller control) {
        this.controller = control;
    }

    // Selection methods
    public void valueChanged(ListSelectionEvent e) {
        DefaultListSelectionModel source = (DefaultListSelectionModel) e.getSource();
        ListSelectionListener[] listListeners = source.getListSelectionListeners();

        Boolean valueIsAdjusting = e.getValueIsAdjusting();

        // Check which table changed value
        if (source == stockSymbolTableSelectionModel) {
            if (source.isSelectionEmpty()) {
                predictButton_prediction.setEnabled(false);
                plotStockButton_predict.setEnabled(false);
            } else if (valueIsAdjusting == false) {
                predictButton_prediction.setEnabled(true);
                plotStockButton_predict.setEnabled(true);
            }
        } else {
            if (source.isSelectionEmpty()) {
                deleteSymbolButton_Management_Symbols.setEnabled(false);
            } else {
                deleteSymbolButton_Management_Symbols.setEnabled(true);
            }
        }
    }
}
